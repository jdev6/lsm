%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lsm
scope: source.example-c
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    - match: "'"
      scope: punctuation.definition.string.begin.example-c
      push: single_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: ','
      scope: punctuation.definition.comment.example-c
      push: line_comment
  
    #Shebang
    - match: '^#!'
      scope: punctuation.definition.comment.example-c
      push: shebang

    # Registers
    - match: '@[a-zA-Z_0-9]*'
      scope: source.c meta.function.c meta.block.c keyword.control.c

    # Keywords
    - match: '(!)?(&)?[a-zA-Z_0-9_]*'
      scope: storage.type.c

    # Numbers
    - match: '\b(-)?[x0-9.]+\b'
      scope: constant.numeric.example-c

      #Labels
    - match: '>[A-Z0-9_a-z]*'
      scope: source.c meta.function.c entity.name.function.c

      #Preproccessor
    - match: '\['
      scope: source.example-c source.c meta.function.c meta.block.c keyword.operator.comparison.c
      push: preproccessor
 
  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: "'"
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
  
  shebang:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true

  preproccessor:
    - meta_scope: source.c meta.function.c entity.name.function.c
    - match: '\]'
      scope: source.example-c source.c meta.function.c meta.block.c keyword.operator.comparison.c
      pop: true
